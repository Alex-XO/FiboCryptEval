package app.ui

import app.AppContext
import app.generator.SeededGenerator
import app.model.EncryptionResult
import app.service.Encryptor
import app.util.allGenerators
import javafx.geometry.Insets
import javafx.scene.control.*
import javafx.scene.layout.VBox
import javafx.scene.text.Text
import javafx.stage.Stage
import kotlin.random.Random

class EncryptView(
    private val primaryStage: Stage,
    private val fromTestView: Boolean = false
) : VBox() {

    init {
        spacing = 10.0
        padding = Insets(15.0)

        val inputLabel = Label("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:")
        val inputField = TextField()

        val resultLabel = Label("–†–µ–∑—É–ª—å—Ç–∞—Ç:")
        val resultArea = Text()

        // –ö–æ–º–±–æ-–±–æ–∫—Å –≤—ã–±–æ—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
        val generatorSelector = ComboBox<SeededGenerator>()

        if (!fromTestView) {
            val generators = allGenerators(List(5) { Random.nextLong() })
            generatorSelector.items.addAll(generators)

            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
            generatorSelector.setCellFactory {
                object : ListCell<SeededGenerator>() {
                    override fun updateItem(item: SeededGenerator?, empty: Boolean) {
                        super.updateItem(item, empty)
                        text = if (empty || item == null) "" else item.name
                    }
                }
            }
            generatorSelector.buttonCell = object : ListCell<SeededGenerator>() {
                override fun updateItem(item: SeededGenerator?, empty: Boolean) {
                    super.updateItem(item, empty)
                    text = if (empty || item == null) "" else item.name
                }
            }

            generatorSelector.promptText = "–í—ã–±–µ—Ä–∏—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä"
        }

        val encryptButton = Button("üîê –ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å").apply {
            setOnAction {
                val text = inputField.text
                if (text.isNullOrEmpty()) {
                    resultArea.text = "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç."
                    return@setOnAction
                }

                // –ü–æ–ª—É—á–∞–µ–º —Å–∏–¥ –∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
                val seeded = if (fromTestView) {
                    AppContext.bestGenerator
                } else {
                    val selected = generatorSelector.value
                    if (selected == null) {
                        resultArea.text = "–í—ã–±–µ—Ä–∏—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä."
                        return@setOnAction
                    }
                    selected
                }

                val generator = seeded.constructor(seeded.seed)
                val encryptor = Encryptor(generator, seeded.seed)
                val result: EncryptionResult = encryptor.encrypt(text)
                resultArea.text = "Base64: ${result.encryptedBase64}\nSeed: ${result.seed}"
            }
        }

        val backButton = Button("‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é").apply {
            setOnAction {
                primaryStage.scene = javafx.scene.Scene(MainView(primaryStage).root, 500.0, 300.0)
            }
        }

        children.addAll(inputLabel, inputField)
        if (!fromTestView) children.add(generatorSelector)
        children.addAll(encryptButton, resultLabel, resultArea, backButton)
    }
}